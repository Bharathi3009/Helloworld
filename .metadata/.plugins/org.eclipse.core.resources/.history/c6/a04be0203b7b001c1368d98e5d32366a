package com.bajaj.helloworld;

//abstract classes

class adding<A,B>{
	A a;
	B b;
	public adding(A a,B b) {
		this.a=a;
		this.b=b;
	}
}

interface vehicle{
	void tyres();
}
abstract class autovehicle{
	abstract void autopilot();
}
class car extends autovehicle implements vehicle{
	public void autopilot() {
		System.out.println("auto-driving");
	}
	@Override
	public void tyres() {
		System.out.println("there are 4");
	}
	public void name() {
		System.out.println("hey car");
	}
}
interface FunctionType{
	public void run();
}
public class practice{
	public static void main(String args[]) {
		adding<Integer,String> ad=new adding<Integer,String>(1,"bannu");
		System.out.println(ad.a+ad.b);
		
		vehicle v=new vehicle() {
			@Override
			public void tyres() {
				System.out.println("there are");
			}
};
		autovehicle a=new autovehicle() {
			public void autopilot() {
				System.out.println("auto.driving");
			}
		};
		car c=new car();
		vehicle av=new car();
		autovehicle av2=new car();
		av2.autopilot();;
		av.tyres();
		v.tyres();
		a.autopilot();
		c.tyres();
		c.autopilot();
		c.name();
		FunctionType code=()->System.out.println("lamda");
		code.run();
		
	}
}
